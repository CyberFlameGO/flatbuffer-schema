// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec3d, Vec3dT } from '../../worldql-fb/messages/vec3d';


export class Record {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Record {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRecord(bb:flatbuffers.ByteBuffer, obj?:Record):Record {
  return (obj || new Record()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRecord(bb:flatbuffers.ByteBuffer, obj?:Record):Record {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Record()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uuid():string|null
uuid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uuid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

position(obj?:Vec3d):Vec3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec3d()).__init(this.bb_pos + offset, this.bb!) : null;
}

worldName():string|null
worldName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
worldName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

data():string|null
data(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
data(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

flex(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

flexLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

flexArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startRecord(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addUuid(builder:flatbuffers.Builder, uuidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uuidOffset, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, positionOffset, 0);
}

static addWorldName(builder:flatbuffers.Builder, worldNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, worldNameOffset, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
}

static addFlex(builder:flatbuffers.Builder, flexOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, flexOffset, 0);
}

static createFlexVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFlexVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endRecord(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): RecordT {
  return new RecordT(
    this.uuid(),
    (this.position() !== null ? this.position()!.unpack() : null),
    this.worldName(),
    this.data(),
    this.bb!.createScalarList(this.flex.bind(this), this.flexLength())
  );
}


unpackTo(_o: RecordT): void {
  _o.uuid = this.uuid();
  _o.position = (this.position() !== null ? this.position()!.unpack() : null);
  _o.worldName = this.worldName();
  _o.data = this.data();
  _o.flex = this.bb!.createScalarList(this.flex.bind(this), this.flexLength());
}
}

export class RecordT {
constructor(
  public uuid: string|Uint8Array|null = null,
  public position: Vec3dT|null = null,
  public worldName: string|Uint8Array|null = null,
  public data: string|Uint8Array|null = null,
  public flex: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const uuid = (this.uuid !== null ? builder.createString(this.uuid!) : 0);
  const worldName = (this.worldName !== null ? builder.createString(this.worldName!) : 0);
  const data = (this.data !== null ? builder.createString(this.data!) : 0);
  const flex = Record.createFlexVector(builder, this.flex);

  Record.startRecord(builder);
  Record.addUuid(builder, uuid);
  Record.addPosition(builder, (this.position !== null ? this.position!.pack(builder) : 0));
  Record.addWorldName(builder, worldName);
  Record.addData(builder, data);
  Record.addFlex(builder, flex);

  return Record.endRecord(builder);
}
}
