// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_INSTRUCTION: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_INSTRUCTION: u8 = 255;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_INSTRUCTION: [Instruction; 12] = [
  Instruction::Heartbeat,
  Instruction::Handshake,
  Instruction::LocalMessage,
  Instruction::GlobalMessage,
  Instruction::RecordCreate,
  Instruction::RecordRead,
  Instruction::RecordUpdate,
  Instruction::RecordDelete,
  Instruction::RecordReply,
  Instruction::AreaSubscribe,
  Instruction::AreaUnsubscribe,
  Instruction::Unknown,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Instruction(pub u8);
#[allow(non_upper_case_globals)]
impl Instruction {
  pub const Heartbeat: Self = Self(0);
  pub const Handshake: Self = Self(1);
  pub const LocalMessage: Self = Self(2);
  pub const GlobalMessage: Self = Self(3);
  pub const RecordCreate: Self = Self(4);
  pub const RecordRead: Self = Self(5);
  pub const RecordUpdate: Self = Self(6);
  pub const RecordDelete: Self = Self(7);
  pub const RecordReply: Self = Self(8);
  pub const AreaSubscribe: Self = Self(9);
  pub const AreaUnsubscribe: Self = Self(10);
  pub const Unknown: Self = Self(255);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 255;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Heartbeat,
    Self::Handshake,
    Self::LocalMessage,
    Self::GlobalMessage,
    Self::RecordCreate,
    Self::RecordRead,
    Self::RecordUpdate,
    Self::RecordDelete,
    Self::RecordReply,
    Self::AreaSubscribe,
    Self::AreaUnsubscribe,
    Self::Unknown,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Heartbeat => Some("Heartbeat"),
      Self::Handshake => Some("Handshake"),
      Self::LocalMessage => Some("LocalMessage"),
      Self::GlobalMessage => Some("GlobalMessage"),
      Self::RecordCreate => Some("RecordCreate"),
      Self::RecordRead => Some("RecordRead"),
      Self::RecordUpdate => Some("RecordUpdate"),
      Self::RecordDelete => Some("RecordDelete"),
      Self::RecordReply => Some("RecordReply"),
      Self::AreaSubscribe => Some("AreaSubscribe"),
      Self::AreaUnsubscribe => Some("AreaUnsubscribe"),
      Self::Unknown => Some("Unknown"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for Instruction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Instruction {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for Instruction {
    type Output = Instruction;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for Instruction {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Instruction {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Instruction {}
