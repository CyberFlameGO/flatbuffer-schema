// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORLDQLFB_WORLDQLFB_MESSAGES_H_
#define FLATBUFFERS_GENERATED_WORLDQLFB_WORLDQLFB_MESSAGES_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

namespace WorldqlFB {
namespace Messages {

struct Vec3d;

struct Record;
struct RecordBuilder;

struct Entity;
struct EntityBuilder;

struct Message;
struct MessageBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec3d FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  Vec3d()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3d(double _x, double _y, double _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3d, 24);

struct Record FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_POSITION = 6,
    VT_WORLD_NAME = 8,
    VT_DATA = 10,
    VT_FLEX = 12
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const WorldqlFB::Messages::Vec3d *position() const {
    return GetStruct<const WorldqlFB::Messages::Vec3d *>(VT_POSITION);
  }
  const flatbuffers::String *world_name() const {
    return GetPointer<const flatbuffers::String *>(VT_WORLD_NAME);
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  const flatbuffers::Vector<uint8_t> *flex() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_FLEX);
  }
  flexbuffers::Reference flex_flexbuffer_root() const {
    return flexbuffers::GetRoot(flex()->Data(), flex()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyField<WorldqlFB::Messages::Vec3d>(verifier, VT_POSITION) &&
           VerifyOffset(verifier, VT_WORLD_NAME) &&
           verifier.VerifyString(world_name()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           VerifyOffset(verifier, VT_FLEX) &&
           verifier.VerifyVector(flex()) &&
           verifier.EndTable();
  }
};

struct RecordBuilder {
  typedef Record Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(Record::VT_UUID, uuid);
  }
  void add_position(const WorldqlFB::Messages::Vec3d *position) {
    fbb_.AddStruct(Record::VT_POSITION, position);
  }
  void add_world_name(flatbuffers::Offset<flatbuffers::String> world_name) {
    fbb_.AddOffset(Record::VT_WORLD_NAME, world_name);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(Record::VT_DATA, data);
  }
  void add_flex(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> flex) {
    fbb_.AddOffset(Record::VT_FLEX, flex);
  }
  explicit RecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Record> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Record>(end);
    return o;
  }
};

inline flatbuffers::Offset<Record> CreateRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    const WorldqlFB::Messages::Vec3d *position = nullptr,
    flatbuffers::Offset<flatbuffers::String> world_name = 0,
    flatbuffers::Offset<flatbuffers::String> data = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> flex = 0) {
  RecordBuilder builder_(_fbb);
  builder_.add_flex(flex);
  builder_.add_data(data);
  builder_.add_world_name(world_name);
  builder_.add_position(position);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<Record> CreateRecordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const WorldqlFB::Messages::Vec3d *position = nullptr,
    const char *world_name = nullptr,
    const char *data = nullptr,
    const std::vector<uint8_t> *flex = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto world_name__ = world_name ? _fbb.CreateString(world_name) : 0;
  auto data__ = data ? _fbb.CreateString(data) : 0;
  auto flex__ = flex ? _fbb.CreateVector<uint8_t>(*flex) : 0;
  return WorldqlFB::Messages::CreateRecord(
      _fbb,
      uuid__,
      position,
      world_name__,
      data__,
      flex__);
}

struct Entity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_POSITION = 6,
    VT_WORLD_NAME = 8,
    VT_DATA = 10,
    VT_FLEX = 12
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const WorldqlFB::Messages::Vec3d *position() const {
    return GetStruct<const WorldqlFB::Messages::Vec3d *>(VT_POSITION);
  }
  const flatbuffers::String *world_name() const {
    return GetPointer<const flatbuffers::String *>(VT_WORLD_NAME);
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  const flatbuffers::Vector<uint8_t> *flex() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_FLEX);
  }
  flexbuffers::Reference flex_flexbuffer_root() const {
    return flexbuffers::GetRoot(flex()->Data(), flex()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyField<WorldqlFB::Messages::Vec3d>(verifier, VT_POSITION) &&
           VerifyOffset(verifier, VT_WORLD_NAME) &&
           verifier.VerifyString(world_name()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           VerifyOffset(verifier, VT_FLEX) &&
           verifier.VerifyVector(flex()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(Entity::VT_UUID, uuid);
  }
  void add_position(const WorldqlFB::Messages::Vec3d *position) {
    fbb_.AddStruct(Entity::VT_POSITION, position);
  }
  void add_world_name(flatbuffers::Offset<flatbuffers::String> world_name) {
    fbb_.AddOffset(Entity::VT_WORLD_NAME, world_name);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(Entity::VT_DATA, data);
  }
  void add_flex(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> flex) {
    fbb_.AddOffset(Entity::VT_FLEX, flex);
  }
  explicit EntityBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline flatbuffers::Offset<Entity> CreateEntity(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    const WorldqlFB::Messages::Vec3d *position = nullptr,
    flatbuffers::Offset<flatbuffers::String> world_name = 0,
    flatbuffers::Offset<flatbuffers::String> data = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> flex = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_flex(flex);
  builder_.add_data(data);
  builder_.add_world_name(world_name);
  builder_.add_position(position);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<Entity> CreateEntityDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const WorldqlFB::Messages::Vec3d *position = nullptr,
    const char *world_name = nullptr,
    const char *data = nullptr,
    const std::vector<uint8_t> *flex = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto world_name__ = world_name ? _fbb.CreateString(world_name) : 0;
  auto data__ = data ? _fbb.CreateString(data) : 0;
  auto flex__ = flex ? _fbb.CreateVector<uint8_t>(*flex) : 0;
  return WorldqlFB::Messages::CreateEntity(
      _fbb,
      uuid__,
      position,
      world_name__,
      data__,
      flex__);
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTRUCTION = 4,
    VT_SENDER_UUID = 6,
    VT_WORLD_NAME = 8,
    VT_DATA = 10,
    VT_RECORDS = 12,
    VT_ENTITIES = 14,
    VT_POSITION = 16,
    VT_FLEX = 18
  };
  const flatbuffers::String *instruction() const {
    return GetPointer<const flatbuffers::String *>(VT_INSTRUCTION);
  }
  const flatbuffers::String *sender_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_SENDER_UUID);
  }
  const flatbuffers::String *world_name() const {
    return GetPointer<const flatbuffers::String *>(VT_WORLD_NAME);
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  const flatbuffers::Vector<flatbuffers::Offset<WorldqlFB::Messages::Record>> *records() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<WorldqlFB::Messages::Record>> *>(VT_RECORDS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<WorldqlFB::Messages::Entity>> *entities() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<WorldqlFB::Messages::Entity>> *>(VT_ENTITIES);
  }
  const WorldqlFB::Messages::Vec3d *position() const {
    return GetStruct<const WorldqlFB::Messages::Vec3d *>(VT_POSITION);
  }
  const flatbuffers::Vector<uint8_t> *flex() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_FLEX);
  }
  flexbuffers::Reference flex_flexbuffer_root() const {
    return flexbuffers::GetRoot(flex()->Data(), flex()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INSTRUCTION) &&
           verifier.VerifyString(instruction()) &&
           VerifyOffset(verifier, VT_SENDER_UUID) &&
           verifier.VerifyString(sender_uuid()) &&
           VerifyOffset(verifier, VT_WORLD_NAME) &&
           verifier.VerifyString(world_name()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(records()) &&
           verifier.VerifyVectorOfTables(records()) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           VerifyField<WorldqlFB::Messages::Vec3d>(verifier, VT_POSITION) &&
           VerifyOffset(verifier, VT_FLEX) &&
           verifier.VerifyVector(flex()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_instruction(flatbuffers::Offset<flatbuffers::String> instruction) {
    fbb_.AddOffset(Message::VT_INSTRUCTION, instruction);
  }
  void add_sender_uuid(flatbuffers::Offset<flatbuffers::String> sender_uuid) {
    fbb_.AddOffset(Message::VT_SENDER_UUID, sender_uuid);
  }
  void add_world_name(flatbuffers::Offset<flatbuffers::String> world_name) {
    fbb_.AddOffset(Message::VT_WORLD_NAME, world_name);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(Message::VT_DATA, data);
  }
  void add_records(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WorldqlFB::Messages::Record>>> records) {
    fbb_.AddOffset(Message::VT_RECORDS, records);
  }
  void add_entities(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WorldqlFB::Messages::Entity>>> entities) {
    fbb_.AddOffset(Message::VT_ENTITIES, entities);
  }
  void add_position(const WorldqlFB::Messages::Vec3d *position) {
    fbb_.AddStruct(Message::VT_POSITION, position);
  }
  void add_flex(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> flex) {
    fbb_.AddOffset(Message::VT_FLEX, flex);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> instruction = 0,
    flatbuffers::Offset<flatbuffers::String> sender_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> world_name = 0,
    flatbuffers::Offset<flatbuffers::String> data = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WorldqlFB::Messages::Record>>> records = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WorldqlFB::Messages::Entity>>> entities = 0,
    const WorldqlFB::Messages::Vec3d *position = nullptr,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> flex = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_flex(flex);
  builder_.add_position(position);
  builder_.add_entities(entities);
  builder_.add_records(records);
  builder_.add_data(data);
  builder_.add_world_name(world_name);
  builder_.add_sender_uuid(sender_uuid);
  builder_.add_instruction(instruction);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *instruction = nullptr,
    const char *sender_uuid = nullptr,
    const char *world_name = nullptr,
    const char *data = nullptr,
    const std::vector<flatbuffers::Offset<WorldqlFB::Messages::Record>> *records = nullptr,
    const std::vector<flatbuffers::Offset<WorldqlFB::Messages::Entity>> *entities = nullptr,
    const WorldqlFB::Messages::Vec3d *position = nullptr,
    const std::vector<uint8_t> *flex = nullptr) {
  auto instruction__ = instruction ? _fbb.CreateString(instruction) : 0;
  auto sender_uuid__ = sender_uuid ? _fbb.CreateString(sender_uuid) : 0;
  auto world_name__ = world_name ? _fbb.CreateString(world_name) : 0;
  auto data__ = data ? _fbb.CreateString(data) : 0;
  auto records__ = records ? _fbb.CreateVector<flatbuffers::Offset<WorldqlFB::Messages::Record>>(*records) : 0;
  auto entities__ = entities ? _fbb.CreateVector<flatbuffers::Offset<WorldqlFB::Messages::Entity>>(*entities) : 0;
  auto flex__ = flex ? _fbb.CreateVector<uint8_t>(*flex) : 0;
  return WorldqlFB::Messages::CreateMessage(
      _fbb,
      instruction__,
      sender_uuid__,
      world_name__,
      data__,
      records__,
      entities__,
      position,
      flex__);
}

inline const WorldqlFB::Messages::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<WorldqlFB::Messages::Message>(buf);
}

inline const WorldqlFB::Messages::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<WorldqlFB::Messages::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WorldqlFB::Messages::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WorldqlFB::Messages::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WorldqlFB::Messages::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WorldqlFB::Messages::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Messages
}  // namespace WorldqlFB

#endif  // FLATBUFFERS_GENERATED_WORLDQLFB_WORLDQLFB_MESSAGES_H_
